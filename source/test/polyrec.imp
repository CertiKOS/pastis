# This example uses polymorphic recursion
# to get a bound of degree 2
# run with options "-degree 2 -no-focus"

var z, g

def start():
	var n

	focus n, g, binom_monotonic(2, g, 0)

	assume g >= 0
	if g > 0:
		z = z + 1
		g = g - 1
		start()
		g = g + 1

		n = g
		while n > 0:
			n = n - 1
			z = z + 1

#def id():
#	var n
#
#	focus n, g, binom_monotonic(2, n, 0), binom_monotonic(2, g, 0)
#
#	n = g
#	assume n >= 0
#
#	if n > 0:
#		n = n - 1
#		z = z + 1
#
#		g = n
#		id()
#		n = g
#
#		g = n + 1  # return n + 1
#
#		while n > 0:
#			n = n - 1
#			z = z + 1
#
#	else:
#		g = n      # don't change return value
#
